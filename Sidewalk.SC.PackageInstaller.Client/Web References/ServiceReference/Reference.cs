//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace Sidewalk.SC.PackageInstaller.Client.ServiceReference {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="SitecorePackageInstallerSoap", Namespace="http://sitecoreblog.blogspot.be/")]
    public partial class SitecorePackageInstaller : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback InstallPackageOperationCompleted;
        
        private System.Threading.SendOrPostCallback InstallTdsPackageOperationCompleted;
        
        private System.Threading.SendOrPostCallback PublishOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public SitecorePackageInstaller() {
            this.Url = global::Sidewalk.SC.PackageInstaller.Client.Properties.Settings.Default.Sidewalk_SC_PackageInstaller_Client_ServiceReference_SitecorePackageInstaller;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event InstallPackageCompletedEventHandler InstallPackageCompleted;
        
        /// <remarks/>
        public event InstallTdsPackageCompletedEventHandler InstallTdsPackageCompleted;
        
        /// <remarks/>
        public event PublishCompletedEventHandler PublishCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://sitecoreblog.blogspot.be/InstallPackage", RequestNamespace="http://sitecoreblog.blogspot.be/", ResponseNamespace="http://sitecoreblog.blogspot.be/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void InstallPackage(string path, string mergeMode) {
            this.Invoke("InstallPackage", new object[] {
                        path,
                        mergeMode});
        }
        
        /// <remarks/>
        public void InstallPackageAsync(string path, string mergeMode) {
            this.InstallPackageAsync(path, mergeMode, null);
        }
        
        /// <remarks/>
        public void InstallPackageAsync(string path, string mergeMode, object userState) {
            if ((this.InstallPackageOperationCompleted == null)) {
                this.InstallPackageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInstallPackageOperationCompleted);
            }
            this.InvokeAsync("InstallPackage", new object[] {
                        path,
                        mergeMode}, this.InstallPackageOperationCompleted, userState);
        }
        
        private void OnInstallPackageOperationCompleted(object arg) {
            if ((this.InstallPackageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InstallPackageCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://sitecoreblog.blogspot.be/InstallTdsPackage", RequestNamespace="http://sitecoreblog.blogspot.be/", ResponseNamespace="http://sitecoreblog.blogspot.be/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string InstallTdsPackage(string path) {
            object[] results = this.Invoke("InstallTdsPackage", new object[] {
                        path});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void InstallTdsPackageAsync(string path) {
            this.InstallTdsPackageAsync(path, null);
        }
        
        /// <remarks/>
        public void InstallTdsPackageAsync(string path, object userState) {
            if ((this.InstallTdsPackageOperationCompleted == null)) {
                this.InstallTdsPackageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInstallTdsPackageOperationCompleted);
            }
            this.InvokeAsync("InstallTdsPackage", new object[] {
                        path}, this.InstallTdsPackageOperationCompleted, userState);
        }
        
        private void OnInstallTdsPackageOperationCompleted(object arg) {
            if ((this.InstallTdsPackageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InstallTdsPackageCompleted(this, new InstallTdsPackageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://sitecoreblog.blogspot.be/Publish", RequestNamespace="http://sitecoreblog.blogspot.be/", ResponseNamespace="http://sitecoreblog.blogspot.be/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void Publish(PublishMode mode, string languageName, string[] publishingTargets, bool deep, string sourceDatabaseName, string targetDatabaseName, string rootItemPath) {
            this.Invoke("Publish", new object[] {
                        mode,
                        languageName,
                        publishingTargets,
                        deep,
                        sourceDatabaseName,
                        targetDatabaseName,
                        rootItemPath});
        }
        
        /// <remarks/>
        public void PublishAsync(PublishMode mode, string languageName, string[] publishingTargets, bool deep, string sourceDatabaseName, string targetDatabaseName, string rootItemPath) {
            this.PublishAsync(mode, languageName, publishingTargets, deep, sourceDatabaseName, targetDatabaseName, rootItemPath, null);
        }
        
        /// <remarks/>
        public void PublishAsync(PublishMode mode, string languageName, string[] publishingTargets, bool deep, string sourceDatabaseName, string targetDatabaseName, string rootItemPath, object userState) {
            if ((this.PublishOperationCompleted == null)) {
                this.PublishOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPublishOperationCompleted);
            }
            this.InvokeAsync("Publish", new object[] {
                        mode,
                        languageName,
                        publishingTargets,
                        deep,
                        sourceDatabaseName,
                        targetDatabaseName,
                        rootItemPath}, this.PublishOperationCompleted, userState);
        }
        
        private void OnPublishOperationCompleted(object arg) {
            if ((this.PublishCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PublishCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://sitecoreblog.blogspot.be/")]
    public enum PublishMode {
        
        /// <remarks/>
        Unknown,
        
        /// <remarks/>
        Full,
        
        /// <remarks/>
        Incremental,
        
        /// <remarks/>
        SingleItem,
        
        /// <remarks/>
        Smart,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void InstallPackageCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void InstallTdsPackageCompletedEventHandler(object sender, InstallTdsPackageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InstallTdsPackageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InstallTdsPackageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void PublishCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}

#pragma warning restore 1591